@page "/PunchItems"
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Oprim.Application.Interfaces
@using Oprim.Domain.Entities.Quality
@using Oprim.Ui.Components.Shared.Dialogs
@rendermode InteractiveServer
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudPaper Elevation="1" Class="p-4 rounded-2xl">

        <MudTable Items="@_items"
                  Hover="true"
                  Dense="true"
                  Filter="new Func<PunchItem,bool>(FilterFunc1)"
                  @bind-SelectedItem="selectedItem1"
                  Class="w-100">

            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="font-weight-bold">Punch Items</MudText>
                <MudSpacer />

                <MudTextField @bind-Value="searchString1"
                              Placeholder="جستجو..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Class="mx-2"
                              Variant="Variant.Outlined"
                              Dense="true" />

                <MudButton Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           Variant="Variant.Filled"
                           Class="rounded-lg"
                           OnClick="CreateItem">
                    افزودن
                </MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>شناسه</MudTh>
                <MudTh>یادداشت</MudTh>
                <MudTh>زمان ایجاد</MudTh>
                <MudTh>لینک مخالف</MudTh>
                <MudTh>عملیات</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Notes">@context.Notes</MudTd>
                <MudTd DataLabel="CreateTime">@context.CreateTime</MudTd>
                <MudTd DataLabel="OpponentLinks">@context.OpponentLinks</MudTd>

                <MudTd DataLabel="Actions" Class="text-nowrap">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Info"
                                   OnClick="@(() => EditItem(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error" />
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

        </MudTable>
    </MudPaper>
</MudContainer>
@code {
    [Inject] IUnitOfWork _ofWork { get; set; } = default!;
    [Inject] IDialogService DialogService { get; set; } = default!;

    private string searchString1 = "";
    private PunchItem? selectedItem1;
    private List<PunchItem> _items = [];

    protected override async Task OnInitializedAsync()
    {
        var query = _ofWork.GenericRepository<PunchItem>().TableNoTracking.AsQueryable();
        _items = await query.ToListAsync();
    }

    private async Task CreateItem()
    {
        var parameters = new DialogParameters { ["Item"] = null };
        var dialog = DialogService.Show<PunchItemDialog>("افزودن آیتم", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newItem = (PunchItem)result.Data!;
            await _ofWork.GenericRepository<PunchItem>().AddAsync(newItem,CancellationToken.None);

            _items.Add(newItem);
        }
    }

    private async Task EditItem(PunchItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var dialog = DialogService.Show<PunchItemDialog>("ویرایش آیتم", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updated = (PunchItem)result.Data!;
            await _ofWork.GenericRepository<PunchItem>().UpdateAsync(updated,CancellationToken.None);

            var index = _items.FindIndex(x => x.Id == updated.Id);
            if (index >= 0) _items[index] = updated;
        }
    }

    private bool FilterFunc1(PunchItem element) =>
        string.IsNullOrWhiteSpace(searchString1) ||
        element.Notes.Contains(searchString1, StringComparison.OrdinalIgnoreCase);
}

